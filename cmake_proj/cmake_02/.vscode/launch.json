{
    // "version" 字段指定了此 launch.json 文件的版本。这是一个必需的字段，VS Code 用它来识别配置文件的格式。
    "version": "0.2.0",
    // "configurations" 是一个 JSON 数组，其中包含了所有可用的调试配置。
    // 您可以定义多个配置，它们会显示在 VS Code "运行和调试" 侧边栏的下拉菜单中。
    "configurations": [
                {
            // "name": 此调试配置的显示名称。
            "name": "(gdb) MinGW 启动调试",
            // "type": 要使用的调试器类型。'cppdbg' 表示使用 GDB 或 LLDB 进行调试。
            //          这通常用于使用 MinGW/GCC 或 Clang 编译的程序。
            "type": "cppdbg",
            // "request": 请求类型，'launch' 表示启动新程序。
            "request": "launch",
            // "program": 要调试的可执行文件的完整路径。
            "program": "${workspaceFolder}/build/cmake02.exe",
            // "args": 传递给程序的命令行参数。
            "args": [],
            // "stopAtEntry": 是否在程序入口处暂停。
            "stopAtEntry": false,
            // "cwd": 程序运行时的工作目录。
            "cwd": "${workspaceFolder}",
            // "environment": 为调试会话设置的环境变量。
            "environment": [],
            // "externalConsole": 是否使用外部控制台窗口。
            //                    'false' 表示使用 VS Code 的集成终端。'true' 会弹出一个新的外部控制台。
            "externalConsole": false,
            // "MIMode": "Machine Interface Mode"，指定与调试器通信的模式。
            //           对于 GDB，请使用 "gdb"。对于 LLDB，请使用 "lldb"。
            "MIMode": "gdb",
            // "miDebuggerPath": GDB 调试器可执行文件 (gdb.exe) 的【绝对路径】。
            //                   【！！！非常重要！！！】
            //                   您必须将此路径修改为您自己电脑上 MinGW 安装目录下的 gdb.exe 的实际位置。
            //                   如果路径错误，调试将无法启动。
            "miDebuggerPath": "C:/Program Files/mingw64/bin/gdb.exe",
            // "setupCommands": 在启动程序之前发送给 GDB 的一系列命令。
            "setupCommands": [
                {
                    // "description": 此命令的描述，会在调试控制台中显示。
                    "description": "为 gdb 启用整齐打印",
                    // "text": 要执行的 GDB 命令。'-enable-pretty-printing' 可以让 GDB 更好地显示 STL 容器等复杂数据结构。
                    "text": "-enable-pretty-printing",
                    // "ignoreFailures": 如果此命令执行失败，是否忽略错误并继续调试。
                    "ignoreFailures": true
                }
            ],
            // "preLaunchTask": 在启动调试之前执行的构建任务。
            "preLaunchTask": "CMake: build"
        },
        {
            // "name": 此调试配置的显示名称。会出现在调试配置下拉菜单中。
            "name": "(Windows) MSVC 启动调试",
            // "type": 要使用的调试器类型。'cppvsdbg' 表示使用 Microsoft Visual C++ 调试器。
            //          这通常用于使用 MSVC (Microsoft Visual C++ 编译器) 编译的程序。
            "type": "cppvsdbg",
            // "request": 调试会话的请求类型。'launch' 表示启动一个新的程序实例进行调试。
            //            另一个常见的值是 'attach'，用于附加到已在运行的进程。
            "request": "launch",
            // "program": 要调试的可执行文件的【完整路径】。
            //            `${workspaceFolder}` 是一个预定义变量，代表当前项目根目录。
            //            您需要确保这个路径指向 CMake 生成的可执行文件。请根据您的 CMakeLists.txt 配置修改 'build' 目录和 'cmake_02.exe' 文件名。
            "program": "${workspaceFolder}/build/cmake_02.exe",
            // "args": 传递给程序的命令行参数，以字符串数组的形式提供。
            //         例如: ["arg1", "value1"]
            "args": [],
            // "stopAtEntry": 如果设置为 true，调试器将在程序入口点（例如 main 函数的第一行）自动暂停。
            "stopAtEntry": false,
            // "cwd": "Current Working Directory" 的缩写，即程序运行时的工作目录。
            //        这对于需要读取相对路径文件的程序非常重要。`${workspaceFolder}` 是一个很好的默认值。
            "cwd": "${workspaceFolder}",
            // "environment": 为调试会ipg会话设置的环境变量。以键值对数组的形式提供。
            //              例如: [{"name": "MY_VAR", "value": "test"}]
            "environment": [],
            // "console": 指定程序使用的控制台类型。
            //            'integratedTerminal' - 使用 VS Code 的集成终端显示输出(cout)和接收输入(cin)。
            //            'newExternalWindow' - 弹出一个新的外部命令提示符窗口。
            "console": "integratedTerminal",
            // "preLaunchTask": 在启动调试之前要执行的任务的名称。
            //                  'CMake: build' 是 CMake Tools 扩展提供的默认构建任务。
            //                  这可以确保您每次调试的都是最新编译的代码。
            "preLaunchTask": "CMake: build"
        }
    ]
}